#!/usr/bin/env python3
"""
Script d'apprentissage continu automatique.
Lance un syst√®me qui observe et apprend automatiquement de toutes nouvelles donn√©es.
"""

import os
import sys
import argparse
import signal
import time
from pathlib import Path

# Ajouter le dossier src au path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.adaptive_learner import AdaptiveLearner
import logging


class ContinuousLearningSystem:
    """Syst√®me d'apprentissage continu qui surveille et s'adapte automatiquement"""
    
    def __init__(self, 
                 model_name: str = "microsoft/DialoGPT-small",
                 watch_directory: str = "data/incoming",
                 check_interval: int = 30):
        
        self.learner = AdaptiveLearner(base_model=model_name)
        self.watch_directory = Path(watch_directory)
        self.check_interval = check_interval
        self.running = True
        
        # Cr√©er le dossier de surveillance s'il n'existe pas
        self.watch_directory.mkdir(parents=True, exist_ok=True)
        
        # Configuration du logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('logs/continuous_learning.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
        # Gestionnaire pour arr√™t propre
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """Gestionnaire pour arr√™t propre du syst√®me"""
        self.logger.info("üõë Arr√™t du syst√®me d'apprentissage continu...")
        self.running = False
    
    def start_learning(self):
        """D√©marre le syst√®me d'apprentissage continu"""
        self.logger.info("üöÄ D√©marrage du syst√®me d'apprentissage continu")
        self.logger.info(f"üìÅ Surveillance du dossier: {self.watch_directory}")
        self.logger.info(f"‚è∞ Intervalle de v√©rification: {self.check_interval}s")
        
        # Cr√©er un fichier de d√©monstration si le dossier est vide
        self._create_demo_file()
        
        processed_files = set()
        
        while self.running:
            try:
                # Rechercher de nouveaux fichiers
                current_files = set()
                for pattern in ['*.json', '*.txt', '*.csv']:
                    current_files.update(self.watch_directory.glob(pattern))
                
                new_files = current_files - processed_files
                
                if new_files:
                    self.logger.info(f"üì• {len(new_files)} nouveaux fichiers d√©tect√©s")
                    
                    for file_path in new_files:
                        self._process_new_file(file_path)
                        processed_files.add(file_path)
                
                # Attendre avant la prochaine v√©rification
                time.sleep(self.check_interval)
                
            except Exception as e:
                self.logger.error(f"‚ùå Erreur dans la boucle principale: {e}")
                time.sleep(self.check_interval)
        
        self.logger.info("‚úÖ Syst√®me d'apprentissage continu arr√™t√©")
    
    def _process_new_file(self, file_path: Path):
        """Traite un nouveau fichier d√©tect√©"""
        try:
            self.logger.info(f"üîç Traitement du fichier: {file_path.name}")
            
            # Observer et apprendre du nouveau fichier
            result = self.learner.observe_and_learn(str(file_path))
            
            # Afficher les r√©sultats
            for pattern_name, pattern_result in result.items():
                if pattern_result['status'] == 'success':
                    self.logger.info(f"‚úÖ {pattern_name}: Apprentissage r√©ussi ({pattern_result['num_examples']} exemples)")
                else:
                    self.logger.error(f"‚ùå {pattern_name}: √âchec - {pattern_result.get('error', 'Erreur inconnue')}")
            
            # D√©placer le fichier trait√© vers un dossier d'archives
            archive_dir = self.watch_directory / "processed"
            archive_dir.mkdir(exist_ok=True)
            
            archived_file = archive_dir / f"{file_path.stem}_{int(time.time())}{file_path.suffix}"
            file_path.rename(archived_file)
            
            self.logger.info(f"üìÇ Fichier archiv√©: {archived_file.name}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors du traitement de {file_path}: {e}")
    
    def _create_demo_file(self):
        """Cr√©e un fichier de d√©monstration pour montrer le fonctionnement"""
        demo_file = self.watch_directory / "demo_learning.json"
        
        if not demo_file.exists():
            demo_data = [
                {
                    "input": "Comment fonctionne l'apprentissage automatique ?",
                    "output": "L'apprentissage automatique permet aux machines d'apprendre des patterns dans les donn√©es sans √™tre explicitement programm√©es pour chaque t√¢che sp√©cifique."
                },
                {
                    "input": "Qu'est-ce que l'apprentissage adaptatif ?",
                    "output": "L'apprentissage adaptatif est la capacit√© d'un syst√®me √† modifier son comportement en temps r√©el en fonction de nouvelles informations ou exp√©riences."
                }
            ]
            
            import json
            with open(demo_file, 'w', encoding='utf-8') as f:
                json.dump(demo_data, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"üìÑ Fichier de d√©monstration cr√©√©: {demo_file}")
    
    def test_learning(self, input_text: str):
        """Teste le syst√®me d'apprentissage avec une entr√©e"""
        try:
            response = self.learner.generate_response(input_text)
            print(f"Question: {input_text}")
            print(f"R√©ponse: {response}")
            return response
        except Exception as e:
            print(f"Erreur lors du test: {e}")
            return None


def main():
    parser = argparse.ArgumentParser(description="Syst√®me d'apprentissage continu automatique")
    parser.add_argument('--model', default='microsoft/DialoGPT-small', 
                       help='Mod√®le de base √† utiliser')
    parser.add_argument('--watch-dir', default='data/incoming',
                       help='Dossier √† surveiller pour les nouvelles donn√©es')
    parser.add_argument('--interval', type=int, default=30,
                       help='Intervalle de v√©rification en secondes')
    parser.add_argument('--test', type=str,
                       help='Tester le syst√®me avec une question')
    
    args = parser.parse_args()
    
    # Cr√©er le syst√®me d'apprentissage
    system = ContinuousLearningSystem(
        model_name=args.model,
        watch_directory=args.watch_dir,
        check_interval=args.interval
    )
    
    if args.test:
        # Mode test
        print("üß™ Mode test activ√©")
        system.test_learning(args.test)
    else:
        # Mode apprentissage continu
        print("ü§ñ D√©marrage du syst√®me d'apprentissage continu...")
        print("D√©posez des fichiers JSON, TXT ou CSV dans le dossier de surveillance.")
        print("Le syst√®me s'adaptera automatiquement aux nouveaux donn√©es.")
        print("Appuyez sur Ctrl+C pour arr√™ter.")
        
        try:
            system.start_learning()
        except KeyboardInterrupt:
            print("\nüõë Arr√™t demand√© par l'utilisateur")


if __name__ == "__main__":
    main()
