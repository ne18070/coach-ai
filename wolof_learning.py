#!/usr/bin/env python3
"""
Script pour d√©montrer l'apprentissage et l'inf√©rence en wolof.
Ce script sert de d√©monstration pratique de l'utilisation du syst√®me
d'apprentissage adaptatif avec la langue wolof.
"""

import os
import sys
import json
import argparse
from pathlib import Path

# Ajouter le dossier src au path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.adaptive_learner import AdaptiveLearner
import logging

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def train_with_wolof_data(data_path=None, model_name="TheBloke/Mistral-7B-v0.1-GGUF"):
    """Entra√Æne le mod√®le avec des donn√©es en wolof"""
    
    # Utiliser les donn√©es d'exemple si aucun chemin n'est fourni
    if data_path is None:
        data_path = "data/samples/wolof/wolof_conversations.json"
        if not os.path.exists(data_path):
            data_path = "data/samples/wolof/wolof_texte.txt"
            if not os.path.exists(data_path):
                raise FileNotFoundError("Aucune donn√©e wolof trouv√©e. Veuillez cr√©er des exemples avec scripts/collect_wolof_data.py")
    
    # V√©rifier que le fichier existe
    if not os.path.exists(data_path):
        raise FileNotFoundError(f"Fichier non trouv√©: {data_path}")
    
    logger.info(f"üåç Apprentissage avec les donn√©es wolof: {data_path}")
    
    # Initialiser le syst√®me d'apprentissage adaptatif
    learner = AdaptiveLearner(base_model=model_name)
    
    # Observer et apprendre des donn√©es
    results = learner.observe_and_learn(data_path)
    
    # Afficher les r√©sultats
    logger.info("‚úÖ Apprentissage termin√©")
    logger.info(f"R√©sultats: {results}")
    
    return learner

def interactive_wolof_testing(learner=None):
    """Test interactif du mod√®le en wolof"""
    if learner is None:
        logger.info("‚ö†Ô∏è Aucun mod√®le entra√Æn√© fourni, initialisation d'un nouveau mod√®le...")
        learner = AdaptiveLearner()
        logger.info("‚ö†Ô∏è Ce mod√®le n'a pas √©t√© entra√Æn√© sur des donn√©es wolof. Les r√©sultats peuvent √™tre limit√©s.")
    
    logger.info("üéÆ Mode interactif de test en wolof")
    logger.info("Tapez 'exit' pour quitter")
    
    while True:
        user_input = input("\nüó£Ô∏è Vous (en wolof): ")
        if user_input.lower() == 'exit':
            break
        
        try:
            # G√©n√©rer une r√©ponse
            response = learner.generate_response(user_input)
            print(f"ü§ñ Mod√®le: {response}")
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration: {e}")

def main():
    parser = argparse.ArgumentParser(description='Apprentissage et test en wolof')
    parser.add_argument('--data', help='Chemin vers les donn√©es wolof')
    parser.add_argument('--model', default="TheBloke/Mistral-7B-v0.1-GGUF", 
                       help='Mod√®le de base √† utiliser')
    parser.add_argument('--interactive', action='store_true', 
                       help='Mode interactif pour tester le mod√®le')
    parser.add_argument('--train-only', action='store_true',
                       help='Entra√Æner uniquement, sans mode interactif')
    
    args = parser.parse_args()
    
    try:
        if args.interactive and not args.train_only:
            # Mode interactif sans entra√Ænement
            interactive_wolof_testing()
        else:
            # Entra√Æner le mod√®le
            learner = train_with_wolof_data(args.data, args.model)
            
            # Mode interactif apr√®s entra√Ænement
            if not args.train_only:
                interactive_wolof_testing(learner)
    
    except Exception as e:
        logger.error(f"Erreur: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
