#!/usr/bin/env python3
"""
üåü Collecteur Intelligent Autonome
Lance la collecte automatique de donn√©es sur internet
et nourrit l'apprentissage adaptatif en temps r√©el
"""

import asyncio
import argparse
import signal
import sys
import time
from pathlib import Path
from typing import Optional

from src.data_collector import AutoDataCollector, IntelligentDataCollector, DataSource
from src.adaptive_learner import AdaptiveLearner


class AutonomousLearningSystem:
    """
    Syst√®me d'apprentissage autonome qui collecte des donn√©es
    sur internet et s'adapte automatiquement
    """
    
    def __init__(self, storage_dir: str = "data/collected"):
        self.collector = AutoDataCollector(storage_dir)
        self.learner = AdaptiveLearner()
        self.running = False
        
    async def start_autonomous_learning(self, 
                                       collection_interval: int = 6,
                                       learning_interval: int = 12):
        """
        Lance l'apprentissage autonome :
        - Collecte des donn√©es sur internet
        - Apprentissage adaptatif automatique
        """
        
        print("üöÄ === SYST√àME D'APPRENTISSAGE AUTONOME ===")
        print("ü§ñ L'IA va maintenant apprendre de fa√ßon autonome...")
        print("üåê Collecte de donn√©es depuis internet...")
        print("üß† Adaptation automatique du mod√®le...")
        print()
        
        self.running = True
        
        # Gestion de l'arr√™t propre
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        # Collecte initiale
        await self._initial_data_collection()
        
        # Boucle principal d'apprentissage autonome
        last_learning = time.time()
        
        while self.running:
            try:
                current_time = time.time()
                
                # Collecte de nouvelles donn√©es
                print(f"üåê Collecte de donn√©es - {time.strftime('%H:%M:%S')}")
                data = await self.collector.collector.collect_all_sources()
                
                if data:
                    # Sauvegarde des donn√©es collect√©es
                    self.collector.collector.save_collected_data(data)
                    print(f"üì• {len(data)} nouveaux √©l√©ments collect√©s")
                    
                    # D√©clenchement de l'apprentissage si interval √©coul√©
                    if current_time - last_learning >= learning_interval * 3600:
                        await self._trigger_adaptive_learning()
                        last_learning = current_time
                    
                    # Affichage des statistiques
                    await self._display_progress_stats()
                
                # Attente avant la prochaine collecte
                await asyncio.sleep(collection_interval * 3600)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                print(f"‚ùå Erreur dans le cycle d'apprentissage: {e}")
                await asyncio.sleep(300)  # Attente 5 min avant retry
        
        print("üõë Arr√™t du syst√®me d'apprentissage autonome")
    
    async def _initial_data_collection(self):
        """Collecte initiale de donn√©es pour d√©marrer l'apprentissage"""
        print("üéØ Collecte initiale de donn√©es de qualit√©...")
        
        # Collecte depuis les meilleures sources
        data = await self.collector.collector.collect_all_sources()
        
        if data:
            self.collector.collector.save_collected_data(data)
            print(f"‚úÖ Collecte initiale: {len(data)} √©l√©ments")
            
            # Apprentissage initial
            await self._trigger_adaptive_learning()
        else:
            print("‚ö†Ô∏è Aucune donn√©e collect√©e lors de l'initialisation")
    
    async def _trigger_adaptive_learning(self):
        """D√©clenche l'apprentissage adaptatif sur les nouvelles donn√©es"""
        print("üß† D√©clenchement de l'apprentissage adaptatif...")
        
        collected_dir = Path("data/collected")
        if not collected_dir.exists():
            return
            
        # Recherche des fichiers de donn√©es r√©cents
        json_files = list(collected_dir.glob("*.json"))
        
        if json_files:
            # Tri par date de modification (plus r√©cents en premier)
            json_files.sort(key=lambda f: f.stat().st_mtime, reverse=True)
            
            # Apprentissage sur les fichiers les plus r√©cents
            for data_file in json_files[:3]:  # 3 fichiers les plus r√©cents
                try:
                    print(f"üìö Apprentissage depuis: {data_file.name}")
                    result = self.learner.observe_and_learn(str(data_file))
                    
                    if result:
                        print(f"‚úÖ Apprentissage r√©ussi: {result.get('patterns_learned', 0)} patterns")
                    
                except Exception as e:
                    print(f"‚ùå Erreur d'apprentissage sur {data_file.name}: {e}")
        
        print("üéØ Cycle d'apprentissage termin√©")
    
    async def _display_progress_stats(self):
        """Affiche les statistiques de progression"""
        stats = self.collector.collector.get_collection_stats()
        
        print("üìä === STATISTIQUES D'APPRENTISSAGE ===")
        print(f"üåê Sources actives: {stats['active_sources']}/{stats['total_sources']}")
        print(f"üìà Types de donn√©es: {', '.join(stats['sources_by_type'].keys())}")
        if stats['last_collection']:
            print(f"‚è∞ Derni√®re collecte: {stats['last_collection'].strftime('%H:%M:%S')}")
        
        # Statistiques d'apprentissage
        memory_file = Path("models/adaptive_memory.json")
        if memory_file.exists():
            import json
            with open(memory_file, 'r', encoding='utf-8') as f:
                memory = json.load(f)
                print(f"üß† Patterns appris: {len(memory.get('learned_patterns', []))}")
                print(f"üéØ Exp√©riences: {len(memory.get('learning_history', []))}")
        
        print("=" * 45)
        print()
    
    def _signal_handler(self, signum, frame):
        """Gestion de l'arr√™t propre"""
        print(f"\nüõë Signal re√ßu ({signum}), arr√™t en cours...")
        self.running = False
    
    def add_specialized_sources(self, domain: str):
        """Ajoute des sources sp√©cialis√©es selon le domaine"""
        domain_sources = {
            'ai': [
                DataSource(
                    name="OpenAI_Blog",
                    url="https://openai.com/blog/rss.xml",
                    data_type="text",
                    extraction_method="rss",
                    update_frequency=24
                ),
                DataSource(
                    name="DeepMind_Publications",
                    url="https://deepmind.com/research",
                    data_type="instruction",
                    extraction_method="scraping",
                    update_frequency=48
                )
            ],
            'code': [
                DataSource(
                    name="Python_Tutorials",
                    url="https://realpython.com/atom.xml",
                    data_type="code",
                    extraction_method="rss",
                    update_frequency=12
                ),
                DataSource(
                    name="GitHub_Trending",
                    url="https://github.com/trending/python",
                    data_type="code",
                    extraction_method="scraping",
                    update_frequency=6
                )
            ],
            'science': [
                DataSource(
                    name="Nature_AI",
                    url="https://www.nature.com/subjects/machine-learning.rss",
                    data_type="text",
                    extraction_method="rss",
                    update_frequency=24
                )
            ]
        }
        
        if domain in domain_sources:
            for source in domain_sources[domain]:
                self.collector.collector.add_custom_source(source)
                print(f"‚ûï Source sp√©cialis√©e ajout√©e: {source.name}")


async def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(description="Collecteur Intelligent Autonome")
    parser.add_argument("--collection-interval", type=int, default=6,
                       help="Intervalle de collecte en heures (d√©faut: 6)")
    parser.add_argument("--learning-interval", type=int, default=12,
                       help="Intervalle d'apprentissage en heures (d√©faut: 12)")
    parser.add_argument("--domain", type=str, choices=['ai', 'code', 'science'],
                       help="Ajouter des sources sp√©cialis√©es pour un domaine")
    parser.add_argument("--test", action="store_true",
                       help="Mode test - collecte unique")
    parser.add_argument("--stats", action="store_true",
                       help="Afficher les statistiques uniquement")
    
    args = parser.parse_args()
    
    # Cr√©ation du syst√®me
    system = AutonomousLearningSystem()
    
    # Ajout de sources sp√©cialis√©es si demand√©
    if args.domain:
        system.add_specialized_sources(args.domain)
    
    if args.test:
        # Mode test - collecte unique
        print("üß™ Mode test - collecte unique")
        data = await system.collector.collector.collect_all_sources()
        system.collector.collector.save_collected_data(data)
        print(f"‚úÖ Test termin√©: {len(data)} √©l√©ments collect√©s")
        
    elif args.stats:
        # Affichage des statistiques uniquement
        await system._display_progress_stats()
        
    else:
        # Mode apprentissage autonome
        await system.start_autonomous_learning(
            collection_interval=args.collection_interval,
            learning_interval=args.learning_interval
        )


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Au revoir !")
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        sys.exit(1)
